let g:python_host_prog='/usr/bin/python'
let mapleader = " "
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

set nocompatible

let $PATH = $PATH . ':' . expand("~/.local/bin")

call plug#begin('~/.nvim/plugged')


Plug 'vtm9/vim-pry'
Plug 'vtm9/vim-interpolation'

Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': ['ruby', 'eruby', 'slim', 'haml', 'coffee', 'javascript'] }
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-ragtag'
" {{{
let g:ragtag_global_maps = 1
" }}}

set completeopt=noinsert,menuone,noselect
set signcolumn=yes

Plug 'ntpeters/vim-better-whitespace'
" {{{
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
" }}}


Plug 'honza/vim-snippets'
Plug 'mhinz/vim-startify'
Plug 'windwp/nvim-autopairs'


" Plug 'rlue/vim-barbaric'
Plug 'puremourning/vimspector'
Plug 'wellle/targets.vim'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

let g:VM_leader = '}'


Plug 'godlygeek/tabular'
Plug 'christoomey/vim-tmux-navigator'
Plug 'jgdavey/tslime.vim'
Plug 'pbrisbin/vim-mkdir'
Plug 'christoomey/vim-run-interactive'
Plug 'itchyny/lightline.vim'
Plug 'dyng/ctrlsf.vim'
" {{{
let g:ctrlsf_ackprg = 'rg'
let g:ctrlsf_case_sensitive = 'smart'

" nmap     <C-F>f <Plug>CtrlSFPrompt
" nmap     <C-F>w <Plug>CtrlSFCwordExec
" vmap     <C-F> <Plug>CtrlSFVwordExec
" nnoremap <C-F>o :CtrlSFOpen<CR>
" nnoremap <C-F>t :CtrlSFToggle<CR>
" inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
" }}}
Plug 'farmergreg/vim-lastplace'
Plug 'airblade/vim-rooter'
" {{{
let g:rooter_patterns = ['Gemfile', 'mix.exs',  '.git/',  'docker-compose.yml', '.gitignore',  ]
" }}}

Plug 'dart-lang/dart-vim-plugin', { 'for': ['dart'] }

Plug 'vim-ruby/vim-ruby', { 'for': ['ruby', 'haml', 'eruby', 'slim'] }
Plug 'kristijanhusak/vim-carbon-now-sh'
Plug 'stephpy/vim-yaml', { 'for': 'yaml' }
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'hashivim/vim-terraform'
Plug 'ekalinin/Dockerfile.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'onemanstartup/vim-slim', { 'for': ['slim', 'slime', 'slimleex'] }
Plug 'gaogao1030/vim-skim', { 'for': ['skim'] }
Plug 'digitaltoad/vim-pug'

Plug 'elixir-editors/vim-elixir'
Plug 'c-brenn/phoenix.vim', { 'for': 'elixir' }
Plug 'vim-erlang/vim-erlang-runtime', { 'for': 'erlang' }
Plug 'vim-erlang/vim-erlang-compiler', { 'for': 'erlang' }
Plug 'jwalton512/vim-blade', { 'for': 'php' }
Plug 'rhysd/vim-clang-format'

" Javascript

" Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Plug 'chemzqm/vim-jsx-improve', { 'for': 'javascript' }
Plug 'maxmellon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'
Plug 'posva/vim-vue'

Plug 'othree/javascript-libraries-syntax.vim'
" {{{
let g:used_javascript_libs = 'jquery'
" }}}

Plug 'othree/html5.vim'
" Plug 'Valloric/MatchTagAlways'

Plug 'othree/yajs.vim'

Plug 'nathanaelkane/vim-indent-guides'

Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'fatih/vim-nginx'
Plug 'andrewstuart/vim-kubernetes'
Plug 'shime/vim-livedown', { 'for': 'markdown' }
" Plug 'reedes/vim-lexical'
" let g:vim_markdown_folding_disabled = 1
" let g:vim_markdown_frontmatter = 1
" let g:vim_markdown_toc_autofit = 1
" let g:lexical#spelllang = ['en_us', 'ru_ru']

" Clojure
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'tpope/vim-leiningen', { 'for': 'clojure' }
Plug 'tpope/vim-classpath', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'venantius/vim-eastwood', { 'for': 'clojure' }

Plug 'ap/vim-css-color'

Plug 'junegunn/limelight.vim'
" {{{
let g:limelight_default_coefficient = 0.7
let g:limelight_conceal_ctermfg = 238
nmap <silent> gl :Limelight!!<CR>
xmap gl <Plug>(Limelight)
" }}}

Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
" {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" Plug 'scrooloose/nerdtree'
" Plug 'vtm9/nerdtree-ag'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" {{{
"
" let g:NERDTreeMinimalUI = 1
" let g:NERDTreeWinSize = 31
" let g:NERDTreeChDirMode = 2
" let g:NERDTreeAutoDeleteBuffer = 1
" let g:NERDTreeShowBookmarks = 1
" let g:NERDTreeCascadeOpenSingleChildDir = 1
" let g:NERDTreeDirArrows = 1
" let g:NERDTreeMouseMode=3
" let g:NERDTreeShowHidden=1
" let NERDTreeMapJumpNextSibling='<C-N>'
" let NERDTreeMapJumpPrevSibling='<C-O>'

" nmap <silent> <Leader><Leader> :NERDTreeToggle<CR>
" let g:NERDTreeGitStatusIndicatorMapCustom = {
"       \ "Modified"  : "●",
"       \ "Staged"    : "✔",
"       \ "Untracked" : "✭",
"       \ "Renamed"   : "➜",
"       \ "Unmerged"  : "❗",
"       \ "Deleted"   : "✖",
"       \ "Dirty"     : "~",
"       \ "Clean"     : "✔︎",
"       \ 'Ignored'   : '☒',
"       \ "Unknown"   : "❓"
"       \ }
" }}}


Plug 'stsewd/fzf-checkout.vim'
Plug 'voldikss/vim-floaterm'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" {{{
" let g:fzf_nvim_statusline = 0 " disable statusline overwriting

nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>; :Rg!<space>
nnoremap <silent> <Leader>h :History<CR>
nnoremap <silent> <C-p> :GFiles<CR>
nnoremap <silent> <C-q> :Files<CR>
nnoremap <silent> L :call SearchWordWithAg()<CR>
vnoremap <silent> L :call SearchVisualSelectionWithAg()<CR>
nnoremap <silent> <Leader>gl :Commits<CR>
nnoremap <silent> <Leader>ga :BCommits<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

command! -bang -nargs=? -complete=dir GFiles
      \ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

function! SearchWordWithAg()
  execute 'Rg!' expand('<cword>')
endfunction

function! SearchVisualSelectionWithAg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Rg!' selection
endfunction
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --fixed-strings --smart-case --hidden --follow --glob "!.git/*" '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)
" }}}

" double brackets
" Plug 'Raimondi/delimitMate'
" {{{
" let delimitMate_expand_cr = 2
"
" let delimitMate_expand_space = 1 " {|} => { | }
" }}}

"
" Plug 'jiangmiao/auto-pairs'
Plug 'mattn/vim-textobj-url'
Plug 'bps/vim-textobj-python', { 'for': 'python' }
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'thinca/vim-textobj-comment'
Plug 'andyl/vim-textobj-elixir'
Plug 'nelstrom/vim-textobj-rubyblock'

Plug 'neoclide/coc.nvim', { 'branch': 'release' }
" {{{

nnoremap <silent> <leader>a :<C-u>CocList -A --normal yank<CR>
let g:coc_global_extensions = [
      \ 'coc-cspell-dicts',
      \ 'coc-spell-checker',
      \ 'coc-xml',
      \ 'coc-stylelint',
      \ 'coc-vimlsp',
      \ 'coc-eslint',
      \ 'coc-pyright',
      \ 'coc-emoji',
      \ 'coc-markdownlint',
      \ 'coc-html',
      \ 'coc-go',
      \ 'coc-git',
      \ 'coc-elixir',
      \ 'coc-lists',
      \ 'coc-phpls',
      \ 'coc-sh',
      \ 'coc-css',
      \ 'coc-prettier',
      \ 'coc-stylelint',
      \ 'coc-json',
      \ 'coc-solargraph',
      \ 'coc-tslint',
      \ 'coc-tsserver',
      \ 'coc-word',
      \ 'coc-python',
      \ 'coc-java',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-ultisnips',
      \ 'coc-snippets',
      \ 'coc-diagnostic',
      \ 'coc-rls',
      \ 'coc-docker',
      \ 'coc-jest',
      \ 'coc-explorer',
      \ 'coc-clock',
      \ 'https://github.com/xabikos/vscode-react',
      \ 'https://github.com/xabikos/vscode-javascript'
      \]

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()



" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
" nmap <leader> uf  <Plug>(coc-fix-current)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>gr <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
highlight link CocErrorSign GruvboxRed

" Remap for rename current word

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

nnoremap <Leader>l :Format<CR>

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
"
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'cocstatus', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'cocstatus': 'coc#status'
      \ },
      \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" Using CocList
" Show all diagnostics
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" }}}


Plug 'bogado/file-line'
Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'
let g:asyncrun_open = 1000
" let g:asyncrun_open = 6
Plug 'tpope/vim-dispatch'

Plug 'janko-m/vim-test'
let test#neovim#term_position = "bottom"
let test#neovim#term_position = "botright 30"
let test#strategy = "asyncrun_background_term"
let test#python#pytest#executable = 'pytest -vv --disable-pytest-warnings'

nnoremap <silent> <Leader>tf :TestFile<CR>
nnoremap <silent> <Leader>tn :TestNearest<CR>
nnoremap <silent> <Leader>ts :TestSuite<CR>
nnoremap <silent> <Leader>tl :TestLast<CR>
nnoremap <silent> <Leader>tv :TestVisit<CR>

Plug 'sunaku/vim-ruby-minitest'

Plug 'mattn/emmet-vim'
" {{{
let g:user_emmet_expandabbr_key = '<C-e>'
" }}}
" Plug 'morhetz/gruvbox'
Plug 'editorconfig/editorconfig-vim'

Plug 'arcticicestudio/nord-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/switch.vim'
" {{{
let g:switch_mapping = '\'
" }}}

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'
Plug 'nvim-telescope/telescope-fzf-writer.nvim'
Plug 'camgraff/telescope-tmux.nvim'

augroup nord-overrides
  autocmd!
  autocmd ColorScheme nord highlight rubySymbol ctermfg=1
  autocmd ColorScheme nord highlight elixirAtom ctermfg=1
augroup END
call plug#end()
" colorscheme jellybeans
" colorscheme PaperColor
colorscheme nord
" set cursorline     " highlight current line
set colorcolumn=120 " highlight column
" highlight! ColorColumn ctermbg=233 guibg=#131313

" highlight! link elixirAtom rubySymbol
set guifont=JetBrains\ Mono\ Regular\ 12
set backspace=2   " Backspace deletes like most programs in insert mode
set history=500
set ruler         " show the cursor position all the time
set incsearch     " do incremental searching
" set laststatus=2  " Always display the status line

set tabstop=2
set shiftround

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

set fileformat=unix

set textwidth=120

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

function! EditMacro()
  call inputsave()
  let g:regToEdit = input('Register to edit: ')
  call inputrestore()
  execute "nnoremap <Plug>em :let @" . eval("g:regToEdit") . "='<C-R><C-R>" . eval("g:regToEdit")
endfunction

nmap <Leader>E :call EditMacro()<CR> <Plug>em

" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
  let myUndoDir = expand(vimDir . '/undodir')
  " Create dirs
  call system('mkdir ' . vimDir)
  call system('mkdir ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

noremap <Leader>1 1gt<CR>
noremap <Leader>2 2gt<CR>
noremap <Leader>3 3gt<CR>

noremap <Leader>s :update<CR>
noremap <Leader>S :wq<CR>
noremap <Leader>q :quit<CR>
noremap <Leader>Q :quit!<CR>
" noremap <Leader>e :edit!<CR>
map Q @q

nmap <Leader>d :call pry#insert()<CR>
nmap <Leader>p :set paste<CR><esc>"+p: set nopaste<cr>
nmap <Leader>P :set paste<CR><esc>o<Esc>"+p: set nopaste<cr>
vmap <Leader>y "+y
nnoremap Y y$
vmap <C-j> :m '>+1<CR>gv=gv
vmap <C-k> :m '<-2<CR>gv=gv
nmap <silent> <C-_> gcc
vmap <silent> <C-_> gc

nnoremap <silent> <F7> :read !git rev-parse --abbrev-ref HEAD<CR>kddi[<ESC>A] -<Space>
nnoremap <silent> <Leader>= :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>0 :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>9 :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
nnoremap <silent> <Leader>8 :set invnumber<CR>
nnoremap <silent> <Leader>7 :call NumberToggle()<cr>

nnoremap <silent> <Leader>gb :Git blame<CR>
nnoremap <silent> <Leader>gs :Git status<CR>
nnoremap <silent> <leader>gd :Git diff origin/HEAD<CR>
nnoremap <silent> <Leader>gv :GV!<CR>
nnoremap <silent> <Leader>e :A<CR>
nnoremap <silent> <Leader>w :R<CR>

nmap <Leader>o o<Esc>k
nmap <Leader>O O<Esc>j
nmap <silent> cp "_ciw<C-R>"<Esc>
" This allows for change paste motion cp{motion}
"
nmap <silent> cP :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
  if a:0  " Invoked from Visual mode, use '< and '> marks.
    silent exe "normal! `<" . a:type . "`>\"_c" . @"
  elseif a:type == 'line'
    silent exe "normal! '[V']\"_c" . @"
  elseif a:type == 'block'
    silent exe "normal! `[\<C-V>`]\"_c" . @"
  else
    silent exe "normal! `[v`]\"_c" . @"
  endif
endfunction

nnoremap <expr> ,c <SID>ExecuteCountOrMotion()
nnoremap <Leader>+ <esc>gg=G``

inoremap <silent> <C-p> <Esc>

" Edit .vimrc
map <leader>vl :vsp $MYVIMRC<CR>
map <leader>vr :source $MYVIMRC<CR>

cmap w!! %!sudo tee > /dev/null %

set foldlevelstart=99
if has('mouse')
  set mouse=a
endif
" set lazyredraw
" set ttyfast

set splitbelow
set splitright

set hidden
set nofoldenable
set wrap
set linebreak
set number
" set ignorecase
set smartcase

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

set showcmd       " display incomplete commands
set autowrite     " Automatically :write before running commands
set expandtab
set softtabstop=2
" set shiftwidth=2
set noshowmode

set cmdheight=1
set scrolloff=3
set inccommand=nosplit

set cursorcolumn

""" Basics Keymaps

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with line wrapping on, this can cause the cursor to actually skip a few lines on the screen because it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down' to mean the next line on the screen
nmap j gj
nmap k gk

nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

nnoremap <expr> л (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> о (v:count == 0 ? 'gj' : 'j')

" augroup common
" autocmd BufEnter * EnableStripWhitespaceOnSave
" augroup END

augroup filetypedetect
  " autocmd!
  " au BufEnter *.markdown,*.mkd,*.md setl wrap tw=79
  " au BufEnter *.json setl ft=javascript
  " au BufEnter *.coffee setl sw=2 expandtab
  " au BufEnter *.py setl ts=4 sw=4 sts=4
  autocmd BufNewFile,BufRead *.slim setlocal filetype=slim
  autocmd BufNewFile,BufRead *.slime setlocal filetype=slim
  autocmd BufNewFile,BufRead *.slimleex setlocal filetype=slim
  autocmd BufNewFile,BufRead *.heex setlocal filetype=html
  " au BufEnter *.js setl ts=2 sw=2 sts=2
  " au BufEnter *.html setl ts=4 sw=4 sts=4
  " au BufEnter *.tex setl wrap tw=79 fo=tcqor
  " au BufEnter *.[ch] setl cindent
  " au BufEnter *.[ch]pp setl cindent
  " au BufEnter Makefile setl ts=4 sts=4 sw=4 noet list
  " au BufEnter *.es6 setf javascript
augroup END


map <Leader>ct :silent !ripper-tags -R --exclude=vendor

filetype plugin on

command E Ex

nmap <F8> :TagbarToggle<CR>
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>

:unmap <leader>qf

highlight link CocErrorSign GruvboxRed

" let g:fzf_colors =
"       \ { 'fg':      ['fg', 'Normal'],
"       \ 'bg':      ['bg', 'Normal'],
"       \ 'hl':      ['fg', 'Comment'],
"       \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"       \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"       \ 'hl+':     ['fg', 'Statement'],
"       \ 'info':    ['fg', 'PreProc'],
"       \ 'border':  ['fg', 'Ignore'],
"       \ 'prompt':  ['fg', 'Conditional'],
"       \ 'pointer': ['fg', 'Exception'],
"       \ 'marker':  ['fg', 'Keyword'],
"       \ 'spinner': ['fg', 'Label'],
"       \ 'header':  ['fg', 'Comment'] }

inoremap <S-Tab> <C-V><Tab>


let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<C-d>'           " replace C-n
let g:VM_maps['Find Subword Under'] = '<C-d>'           " replace visual C-n

" Find files using Telescope command-line sugar.
" nnoremap <leader>ff <cmd>Telescope find_files<cr>
" nnoremap <leader>fg <cmd>Telescope live_grep<cr>
" nnoremap <leader>fb <cmd>Telescope buffers<cr>
" nnoremap <leader>fh <cmd>Telescope help_tags<cr>




" nnoremap <C-n> :NERDTreeFind<CR>
" lua require('init')
" nnoremap <Leader>f :%s///g<Left><Left>
"
autocmd FileType scss setl iskeyword+=@-@
